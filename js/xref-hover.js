// js/xref-hover.js
// Lightweight Bible hover previews for article pages.
// Works with anchors generated by citations.js: <a class="xref-trigger" href="...">Book N:V</a>
(function(){
  // Create hovercard container if missing
  var hover = document.getElementById('hovercard');
  if (!hover) {
    hover = document.createElement('div');
    hover.id = 'hovercard';
    hover.setAttribute('role', 'dialog');
    hover.setAttribute('aria-hidden', 'true');
    hover.style.position = 'fixed';
    hover.style.zIndex = '999';
    hover.style.maxWidth = '420px';
    hover.style.padding = '12px 14px';
    hover.style.background = '#ffffff';
    hover.style.border = '1px solid #e6ebf2';
    hover.style.borderRadius = '10px';
    hover.style.boxShadow = '0 8px 30px rgba(0,0,0,.15)';
    hover.style.display = 'none';
    document.body.appendChild(hover);
  }

  // Utilities
  function esc(s){ return String(s).replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }
  function titleCaseSlug(slug){
    return String(slug||'')
      .split('-')
      .map(w => w ? w.charAt(0).toUpperCase() + w.slice(1) : w)
      .join(' ');
  }

  // Data access
  var DATA_ROOT = '/israelite-research/data';
  function CHAPTER_JSON(canon,b,c){ return DATA_ROOT + '/' + canon + '/' + b + '/' + c + '.json'; }

  // Cache fetched chapters
  var _CHAPTER_CACHE = Object.create(null);
  async function getChapterJson(canon, slug, ch){
    var key = canon + '/' + slug + '/' + ch;
    if (_CHAPTER_CACHE[key]) return _CHAPTER_CACHE[key];
    try{
      var r = await fetch(CHAPTER_JSON(canon, slug, ch));
      if (!r.ok) throw 0;
      var j = await r.json();
      _CHAPTER_CACHE[key] = j;
      return j;
    }catch{ return null; }
  }

  // Parse /israelite-research/<canon>/chapter.html?book=<slug>&ch=<n>#v<verse>
  function parseRefFromHref(href){
    try{
      var u = new URL(href, location.origin);
      var parts = u.pathname.split('/').filter(Boolean); // ["israelite-research","tanakh","chapter.html"]
      var canon = parts[1] || 'tanakh';
      var qs = new URLSearchParams(u.search);
      var slug = (qs.get('book')||'').toLowerCase();
      var ch = parseInt(qs.get('ch')||'1',10) || 1;
      var v = parseInt((u.hash||'').replace(/^#v/,''),10) || 1;
      return {canon, slug, ch, v};
    }catch{ return null; }
  }

  // Hover positioning
  function openHover(html, x, y){
    var pad = 16;
    var vw = window.innerWidth, vh = window.innerHeight;
    hover.innerHTML = html;
    hover.style.display = 'block';
    hover.style.visibility = 'hidden';

    // Measure, then clamp
    var r = hover.getBoundingClientRect();
    var left = (x||0) + 12, top = (y||0) + 12;
    if (left + r.width + pad > vw) left = vw - r.width - pad;
    if (top + r.height + pad > vh) top = vh - r.height - pad;
    if (left < pad) left = pad; if (top < pad) top = pad;

    hover.style.left = left + 'px';
    hover.style.top  = top  + 'px';
    hover.style.visibility = '';
    hover.setAttribute('aria-hidden','false');
  }
  function closeHover(){
    hover.style.display = 'none';
    hover.setAttribute('aria-hidden','true');
  }

  // Render content for a single verse
  async function renderHoverFor(a, evt){
    var ref = parseRefFromHref(a.getAttribute('href'));
    if (!ref) return;

    var data = await getChapterJson(ref.canon, ref.slug, ref.ch);
    if (!data || !Array.isArray(data.verses)) return;

    var vv = data.verses.find(x => Number(x.v) === Number(ref.v));
    var title = titleCaseSlug(ref.slug) + ' ' + ref.ch + ':' + ref.v;
    var txt = vv ? esc(vv.t||'') : 'Verse not available.';

    var html = '<div style="font-weight:700; margin-bottom:.25rem">'+esc(title)+'</div>'
             + '<div style="max-width:46ch; line-height:1.55">'+txt+'</div>';

    // Prefer client coordinates; fallback to element rect
    var rect = a.getBoundingClientRect();
    var x = (evt && 'clientX' in evt) ? evt.clientX : rect.left + 4;
    var y = (evt && 'clientY' in evt) ? evt.clientY : rect.bottom + 4;

    openHover(html, x, y);
  }

  // Event wiring
  var hideTimer = null;

  // Open on mouseover/focus
  document.addEventListener('mouseover', function(e){
    var a = e.target.closest('a.xref-trigger');
    if (!a) return;
    if (hideTimer){ clearTimeout(hideTimer); hideTimer = null; }
    renderHoverFor(a, e);
  });
  document.addEventListener('focusin', function(e){
    var a = e.target.closest('a.xref-trigger');
    if (!a) return;
    if (hideTimer){ clearTimeout(hideTimer); hideTimer = null; }
    renderHoverFor(a, null);
  });

  // Close on mouseout/focusout (with small delay so card can be hovered)
  document.addEventListener('mouseout', function(e){
    var a = e.target.closest('a.xref-trigger');
    if (!a) return;
    hideTimer = setTimeout(closeHover, 120);
  });
  document.addEventListener('focusout', function(e){
    var a = e.target.closest('a.xref-trigger');
    if (!a) return;
    hideTimer = setTimeout(closeHover, 120);
  });

  // Keep open when hovering the card
  hover.addEventListener('mouseenter', function(){
    if (hideTimer){ clearTimeout(hideTimer); hideTimer = null; }
  });
  hover.addEventListener('mouseleave', function(){
    hideTimer = setTimeout(closeHover, 120);
  });

  // Close on scroll or general click
  document.addEventListener('scroll', closeHover);
  document.addEventListener('click', function(e){
    if (!hover.contains(e.target) && !e.target.closest('a.xref-trigger')) closeHover();
  });
})();
